/*
 * servo.c
 */

#include "servo.h"				/* types used by xilinx */

static XTmrCtr tmrport;			/* AXI timer port instance */
static double servo_dutycycle;	/* PWM duty cycle */

static const u32 AXI_0_OPTIONS = 0x0 | XTC_PWM_ENABLE_OPTION

/*
 * Initialize the servo, setting the duty cycle to 7.5%
 */
void servo_init(void) {

	XTmrCtr_Initialize(&tmrport, XPAR_TMRCTR_0_DEVICE_ID);

	XTmrCtr_SetOptions(&tmrport, 0, XTC_CSR_ENABLE_PWM_MASK);
	XTmrCtr_SetOptions(&tmrport, 1, XTC_CSR_ENABLE_PWM_MASK);

	//XTmrCtr_SetOptions(&tmrport, 0, XTC_CSR_ENABLE_PWM_MASK);
	..XTmrCtr_SetOptions(&tmrport, 1, XTC_CSR_ENABLE_PWM_MASK);

	XTmrCtr_SetResetValue(&tmrport, 0, 1000000); 	// 50MHz clock, period = 20ms
	XTmrCtr_SetResetValue(&tmrport, 1, 75000);		// Thigh = 1.5ms for 7.5% duty cycle

	XTmrCtr_Start(&tmrport, 0);
	XTmrCtr_Start(&tmrport, 1);

	//XTmrCtr_Stop(&tmrport, 0);
	//XTmrCtr_Stop(&tmrport, 1);

	servo_duty_cycle = DUTY_CYCLE;

}

/*
 * Set the duty cycle of the servo
 */
void servo_set(double dutycycle) {

	double high_time = (dutycycle / 100) * 0.02;					// in seconds
	double high_count = high_time * XPAR_AXI_TIMER_0_CLOCK_FREQ_HZ;	// in clock cycles

	u32 reset_value = high_freq;
	XTmrCtr_SetResetValue(&tmrport, 1, reset_value);
	servo_dutycycle = dutycycle;

}

